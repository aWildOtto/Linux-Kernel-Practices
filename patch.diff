From be3651420cda52fe3c425af6da45fb95a246572d Mon Sep 17 00:00:00 2001
From: Otto Hu <ohu@sfu.ca>
Date: Sun, 9 Apr 2017 13:14:56 -0700
Subject: [PATCH] cmpt300 project 4 Otto+Ming

---
 Makefile                               |  2 +-
 arch/x86/entry/syscalls/syscall_64.tbl |  3 ++
 cs300/Makefile                         |  1 +
 cs300/array_stats.c                    | 65 +++++++++++++++++++++++++
 cs300/array_stats.h                    |  8 ++++
 cs300/cs300_test.c                     | 16 +++++++
 cs300/process_ancestors.c              | 88 ++++++++++++++++++++++++++++++++++
 cs300/process_ancestors.h              | 17 +++++++
 8 files changed, 199 insertions(+), 1 deletion(-)
 create mode 100644 cs300/Makefile
 create mode 100644 cs300/array_stats.c
 create mode 100644 cs300/array_stats.h
 create mode 100644 cs300/cs300_test.c
 create mode 100644 cs300/process_ancestors.c
 create mode 100644 cs300/process_ancestors.h

diff --git a/Makefile b/Makefile
index c0c41c9..6b4f524 100644
--- a/Makefile
+++ b/Makefile
@@ -910,7 +910,7 @@ export mod_sign_cmd
 
 
 ifeq ($(KBUILD_EXTMOD),)
-core-y		+= kernel/ certs/ mm/ fs/ ipc/ security/ crypto/ block/
+core-y		+= kernel/ certs/ mm/ fs/ ipc/ security/ crypto/ block/ cs300/
 
 vmlinux-dirs	:= $(patsubst %/,%,$(filter %/, $(init-y) $(init-m) \
 		     $(core-y) $(core-m) $(drivers-y) $(drivers-m) \
diff --git a/arch/x86/entry/syscalls/syscall_64.tbl b/arch/x86/entry/syscalls/syscall_64.tbl
index e93ef0b..2add098 100644
--- a/arch/x86/entry/syscalls/syscall_64.tbl
+++ b/arch/x86/entry/syscalls/syscall_64.tbl
@@ -338,6 +338,9 @@
 329	common	pkey_mprotect		sys_pkey_mprotect
 330	common	pkey_alloc		sys_pkey_alloc
 331	common	pkey_free		sys_pkey_free
+332	common	cs300_test		sys_cs300_test
+333	common	array_stats		sys_array_stats
+334 common  process_ancestors   sys_process_ancestors
 
 #
 # x32-specific system call numbers start at 512 to avoid cache impact
diff --git a/cs300/Makefile b/cs300/Makefile
new file mode 100644
index 0000000..e2acf0c
--- /dev/null
+++ b/cs300/Makefile
@@ -0,0 +1 @@
+obj-y:=cs300_test.o array_stats.o process_ancestors.o
diff --git a/cs300/array_stats.c b/cs300/array_stats.c
new file mode 100644
index 0000000..20fca4a
--- /dev/null
+++ b/cs300/array_stats.c
@@ -0,0 +1,65 @@
+#include <linux/kernel.h>
+#include "array_stats.h"
+#include <linux/types.h>
+#include <linux/sched.h>
+#include <linux/unistd.h>
+#include <linux/uaccess.h>
+#include <linux/list.h>
+#include <linux/time.h>
+
+asmlinkage long sys_array_stats(
+                    struct array_stats *stats,
+                    long data[],
+                    long size){
+long dataTemp=0;
+long minNum=0;
+long maxNum=0;
+struct array_stats statTemp;
+
+long sumNum = 0;
+long i=0;
+
+if (copy_from_user(&dataTemp,data,sizeof(long*))!=0) {
+  return -EFAULT;
+}
+
+if (copy_from_user(&statTemp,stats,sizeof(struct array_stats*))!=0) {
+  return -EFAULT;
+}
+//statsTemp = stats now
+if (size<=0) {
+  printk("the size can't be less or equal to 0\n" );
+  return -EINVAL;
+}
+
+minNum = dataTemp;
+maxNum = dataTemp;
+
+
+
+for (i = 0; i < size; i++) {
+  if (copy_from_user(&dataTemp,data+i,sizeof(long))!=0) {
+    return -EFAULT;
+  }
+
+  if (dataTemp<minNum) {
+    minNum = dataTemp;
+  }
+  else if (dataTemp>maxNum) {
+    maxNum = dataTemp;
+  }
+  sumNum+=dataTemp;
+
+}
+
+if (copy_to_user(&(stats->max),&(maxNum),sizeof(long))!=0) {
+  return -EFAULT;
+};
+if (copy_to_user(&(stats->min),&(minNum),sizeof(long))!=0) {
+  return -EFAULT;
+};
+if (copy_to_user(&(stats->sum),&(sumNum),sizeof(long))!=0) {
+  return -EFAULT;
+};
+return 0;
+}
diff --git a/cs300/array_stats.h b/cs300/array_stats.h
new file mode 100644
index 0000000..c9b398b
--- /dev/null
+++ b/cs300/array_stats.h
@@ -0,0 +1,8 @@
+#ifndef _ARRAY_STATS_H_
+#define _ARRAY_STATS_H_
+struct array_stats{
+  long min;
+  long max;
+  long sum;
+};
+#endif
diff --git a/cs300/cs300_test.c b/cs300/cs300_test.c
new file mode 100644
index 0000000..8354c0d
--- /dev/null
+++ b/cs300/cs300_test.c
@@ -0,0 +1,16 @@
+#include <linux/kernel.h>
+
+// Implement a HelloWorld system call
+// Argument is passed from call in user space.
+asmlinkage long sys_cs300_test(int argument)
+{
+	long result = 0;
+	
+	printk("Hello World!\n");
+	printk("--syscall argument %d\n", argument);
+	
+	result = argument + 1;
+	printk("--returning %d + 1 = %ld\n", argument, result);
+	return result;
+
+}
diff --git a/cs300/process_ancestors.c b/cs300/process_ancestors.c
new file mode 100644
index 0000000..c17030f
--- /dev/null
+++ b/cs300/process_ancestors.c
@@ -0,0 +1,88 @@
+#include <linux/kernel.h>
+#include "array_stats.h"
+#include <linux/types.h>
+#include <linux/sched.h>
+#include <linux/unistd.h>
+#include <linux/uaccess.h>
+#include <linux/list.h>
+#include <linux/time.h>
+#include "process_ancestors.h"
+
+asmlinkage long sys_process_ancestors(
+                struct process_info info_array[],
+                long size,
+                long *num_filled) {
+  struct list_head *node;
+	char *name;
+	long pid;
+	long state;
+	long nvcsw;
+	long nivcsw;
+	long uid;
+	long numChildren;
+	long numSiblings;
+  struct task_struct *curTask ;
+  long count;
+  int i;
+  int j;
+  int length;
+	if(size <= 0) {
+		printk("the size can't be less or equal to 0\n" );
+  		return -EINVAL;
+	}
+	curTask = current;
+	count = 0;
+
+	for(i = 0; i < size; i++) {
+		if(curTask == curTask->parent) {
+			printk("parent of process is itself\n");
+		} else {
+			if(i == 0) {
+
+			} else {
+				curTask = curTask->parent;
+			}
+
+			name = curTask->comm;
+			pid = curTask->pid;
+			state = curTask->state;
+			nvcsw = curTask->nvcsw;
+			nivcsw = curTask->nivcsw;
+			uid = curTask->cred->uid.val;
+			numChildren = 0;
+		  numSiblings = 0;
+
+			list_for_each(node, &curTask->children) {
+				numChildren++;
+			}
+			list_for_each(node, &curTask->sibling) {
+				numSiblings++;
+			}
+			if(numSiblings > 0) {
+				numSiblings--;
+			}
+			if(copy_to_user(&(info_array[i].pid), &pid, sizeof(long)) != 0 ||
+				copy_to_user(&(info_array[i].state), &state, sizeof(long)) != 0 ||
+				copy_to_user(&(info_array[i].uid), &uid, sizeof(long)) != 0 ||
+				copy_to_user(&(info_array[i].nvcsw), &nvcsw, sizeof(long)) != 0 ||
+				copy_to_user(&(info_array[i].nivcsw), &nivcsw, sizeof(long)) != 0 ||
+				copy_to_user(&(info_array[i].num_children), &numChildren, sizeof(long)) != 0 ||
+				copy_to_user(&(info_array[i].num_siblings), &numSiblings, sizeof(long)) != 0) {
+				return -EFAULT;
+			}
+
+		  length = strlen(name);
+			for(j = 0;j < length; j++) {
+				if(copy_to_user(&(info_array[i].name[j]), name, sizeof(char)) != 0) {
+					return -EFAULT;
+				}
+				name++;
+			}
+			count++;
+		}
+		if(copy_to_user(num_filled, &count, sizeof(long)) != 0) {
+			return -EFAULT;
+		}
+	}
+	return 0;
+}
diff --git a/cs300/process_ancestors.h b/cs300/process_ancestors.h
new file mode 100644
index 0000000..533750c
--- /dev/null
+++ b/cs300/process_ancestors.h
@@ -0,0 +1,17 @@
+// Structure to hold values returned by process_ancestors sys-call
+#ifndef _PROCESS_ANCESTORS_H
+#define _PROCESS_ANCESTORS_H
+
+#define ANCESTOR_NAME_LEN 16
+struct process_info {
+  long pid; /* Process ID */
+  char name[ANCESTOR_NAME_LEN]; /* Program name of process */
+  long state; /* Current process state */
+  long uid; /* User ID of process owner */
+  long nvcsw; /* # voluntary context switches */
+  long nivcsw; /* # involuntary context switches */
+  long num_children; /* # children process has */
+  long num_siblings; /* # sibling process has */
+};
+
+#endif
-- 
2.7.4

